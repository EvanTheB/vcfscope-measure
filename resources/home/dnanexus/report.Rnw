%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  
%  KCCG WGS Performance Reporter -- Report generator
%  
%  Usage: 
%    Rscript --vanilla -e "library(knitr); knit('report.Rnw', output = 'report.tex')"
%  
%
%  Mark Pinese, 2015
%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[10pt,a4paper]{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{url}

\usepackage{fancyhdr}
\setlength{\headheight}{15.2pt}
\pagestyle{fancyplain}
\usepackage{lastpage}

\begin{document}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PREPARATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% LOAD PRECOMPUTED RESULTS
%--------------------------------------------------------------------
<<load-results, cache=FALSE, echo=FALSE>>=
temp = readRDS("report_data.rds")
params = temp$params
class_subsets.performance_thresholded = temp$class_subsets.performance_thresholded
@


% LIBRARIES AND HELPER FUNCTIONS
%--------------------------------------------------------------------
<<load-libs, cache=FALSE, echo=FALSE>>=
suppressPackageStartupMessages(source("report_functions.R"))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(xtable))
@


% KNITR SETUP
%--------------------------------------------------------------------
<<setup, cache=FALSE, echo=FALSE>>=
library(knitr)
options(
	tikzDocumentDeclaration = "\\documentclass[11pt]{article}",
	tikzLatexPackages = c(
		getOption("tikzLatexPackages"),
		"\\usepackage{amsmath}"),
	tikzMetricsDictionary="tikzMetrics"
)
opts_chunk$set(
	echo = FALSE, results = 'markup', message = FALSE, warning = FALSE, error = TRUE, 
	fig.keep = 'high', fig.align = 'center', fig.width = 5, fig.height = 3.5,
	cache = FALSE, cache.lazy = FALSE)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% REPORT STARTS HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

\fancyhf{}
\lhead{WGS Performance Report (v\texttt{\Sexpr{params$version$script}}): \texttt{\Sexpr{texquote(params$sample.id)}}}
\rhead{Page \thepage\ of \pageref{LastPage}}

\let\endtitlepage\relax
\begin{titlepage}
\begin{flushleft}
\LARGE{WGS Performance Report: \texttt{\Sexpr{texquote(params$sample.id)}}}
\HRule
\end{flushleft}
\end{titlepage}

\section{Summary}
Sample ID: \texttt{\Sexpr{texquote(params$sample.id)}} \\
Input VCF: \texttt{\url{\Sexpr{params$path.test.orig}}} \\
Report version: \texttt{\Sexpr{params$version$script}} \\
Report time: \texttt{\Sexpr{texquote(report$gentime)}} \\
Call criterion: \Sexpr{report$specifications$criterion_latex}

<<plots>>=
marginalizePerformance = function(perf_data, subset, vars, ...)
{
    ddply(perf_data[eval(subset, perf_data, parent.frame()),], vars, function(x) { 
        ntp = sum(x$ntp)
        nfn = sum(x$nfn)
        nfp = sum(x$nfp)
        ntn = sum(x$ntn)

        if (ntp + nfn + nfp + ntn == 0)
        {
            sens = NA
            sens.lci = NA
            sens.uci = NA
        }
        else
        {
            ci_test = binom.test(ntp, ntp + nfn, ...)
            sens = as.vector(ci_test$estimate)
            sens.lci = ci_test$conf.int[1]
            sens.uci = ci_test$conf.int[2]
        }

        c("sens" = sens, "sens.lci" = sens.lci, "sens.uci" = sens.uci, "n" = ntp + nfn + nfp + ntn)
    }, .drop = TRUE)
}

class_subsets.performance_thresholded$mdust = ordered(c("masked" = "Low Complexity", "unmasked" = "High Complexity")[class_subsets.performance_thresholded$mdust], levels = c("Low Complexity", "High Complexity"))
class_subsets.performance_thresholded$rmsk = ordered(c("masked" = "Repeat", "unmasked" = "Non-repeat")[class_subsets.performance_thresholded$rmsk], levels = c("Repeat", "Non-repeat"))


ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, mdust)), 
    aes(x = zyg, y = sens, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    geom_errorbar(aes(ymin = sens.lci, ymax = sens.uci), width = 0.2) + 
    labs(x = "", y = "Sensitivity", fill = "Zygosity", title = "SNV Detection Performance") + 
    facet_wrap(~ mdust) + theme_bw()

ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, mdust)), 
    aes(x = zyg, y = n, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    labs(x = "", y = "Number of mutations", fill = "Zygosity", title = "SNV Counts in Gold Standard") + 
    facet_wrap(~ mdust) + theme_bw()


ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize, mdust)), 
    aes(x = mutsize, y = sens, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Insertion Detection Performance") + 
    facet_wrap(~ mdust) + theme_bw() + ylim(0, 1)

ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize, mdust)), 
    aes(x = mutsize, y = n, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Number of mutations", fill = "Zygosity", colour = "Zygosity", title = "Insertion Counts in Gold Standard") + 
    facet_wrap(~ mdust) + theme_bw()


ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize, mdust)), 
    aes(x = mutsize, y = sens, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Deletion Detection Performance") + 
    facet_wrap(~ mdust) + theme_bw() + ylim(0, 1)

ggplot(
    marginalizePerformance(class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize, mdust)), 
    aes(x = mutsize, y = n, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Number of mutations", fill = "Zygosity", colour = "Zygosity", title = "Deletion Counts in Gold Standard") + 
    facet_wrap(~ mdust) + theme_bw()



false_positive_counts = ddply(subset(class_subsets.performance_thresholded, muttype == "None"), .(mdust, rmsk), function(x) c(nfp = sum(x$nfp)))
false_positive_counts$subset_size = NA
false_positive_counts$subset_size[false_positive_counts$rmsk == "masked" & false_positive_counts$mdust == "masked"] = sum(as.numeric(width(intersect(regions$rmsk, regions$mdust, ignore.strand = TRUE))))
false_positive_counts$subset_size[false_positive_counts$rmsk == "masked" & false_positive_counts$mdust == "unmasked"] = sum(as.numeric(width(intersect(regions$rmsk, setdiff(universe$analysis, regions$mdust, ignore.strand = TRUE), ignore.strand = TRUE))))
false_positive_counts$subset_size[false_positive_counts$rmsk == "unmasked" & false_positive_counts$mdust == "masked"] = sum(as.numeric(width(intersect(setdiff(universe$analysis, regions$rmsk, ignore.strand = TRUE), regions$mdust, ignore.strand = TRUE))))
false_positive_counts$subset_size[false_positive_counts$rmsk == "unmasked" & false_positive_counts$mdust == "unmasked"] = sum(as.numeric(width(intersect(setdiff(universe$analysis, regions$rmsk, ignore.strand = TRUE), setdiff(universe$analysis, regions$mdust, ignore.strand = TRUE), ignore.strand = TRUE))))
stopifnot(sum(false_positive_counts$subset_size) == universe_analysis_size)
false_positive_counts$rate_per_Mb = false_positive_counts$nfp / false_positive_counts$subset_size * 1e6

sum(false_positive_counts$nfp) / universe_analysis_size * 1e6

false_positive_counts$class = NA
false_positive_counts$class[false_positive_counts$rmsk == "masked" & false_positive_counts$mdust == "masked"] = "Both"
false_positive_counts$class[false_positive_counts$rmsk == "masked" & false_positive_counts$mdust == "unmasked"] = "RMSK"
false_positive_counts$class[false_positive_counts$rmsk == "unmasked" & false_positive_counts$mdust == "masked"] = "mdust"
false_positive_counts$class[false_positive_counts$rmsk == "unmasked" & false_positive_counts$mdust == "unmasked"] = "Neither"
false_positive_counts$class = ordered(false_positive_counts$class, levels = c("Both", "mdust", "RMSK", "Neither"))

ggplot(false_positive_counts, aes(x = class, y = rate_per_Mb)) + geom_bar(stat = "identity")
sum(false_positive_counts$rate_per_Mb)
@

% DATA AND SOFTWARE VERSIONS
%--------------------------------------------------------------------
<<region-version, echo=FALSE, cache=FALSE>>=
temp.region_md5 = "NA"
temp.region_label = "NO"
if (param$region.subset)
{
	temp.region_label = "YES"
	temp.region_md5 = fileMD5(param$region.subset.path)
}
@

\section{Versions}
\begin{itemize}
\item Software: \begin{itemize}
	\item Performance script: \texttt{\Sexpr{texquote(param$version$script)}}
	\item R: \texttt{\Sexpr{texquote(R.version$version.string)}} (\texttt{\Sexpr{texquote(R.version$platform)}})
	\item Genome: \texttt{\Sexpr{texquote(param$genome)}} (\texttt{\Sexpr{packageVersion(param$genome)}})
	\item Java: \texttt{\Sexpr{texquote(param$version$java)}}
	\item RTG core: \texttt{\Sexpr{texquote(param$version$rtg)}}
	\item Bedtools: \texttt{\Sexpr{texquote(param$version$bedtools)}}
	\item Execution host: \texttt{\Sexpr{texquote(param$version$host)}}
	\item Execution time: \Sexpr{texquote(report$gentime)}
\end{itemize}
\item Data: \begin{itemize}
	\item Input VCF: \texttt{\url{\Sexpr{param$path.test.orig}}} (MD5 \texttt{\Sexpr{texquote(fileMD5(param$path.test.orig))}})
	\item Sample ID: \texttt{\Sexpr{texquote(params$sample.id)}}
	\item GiaB VCF: \texttt{\url{\Sexpr{param$path.gold.variants.orig}}} (MD5 \texttt{\Sexpr{texquote(fileMD5(param$path.gold.variants.orig))}})
	\item GiaB BED: \texttt{\url{\Sexpr{param$path.gold.regions.orig}}} (MD5 \texttt{\Sexpr{texquote(fileMD5(param$path.gold.regions.orig))}})
	\item Analysis restricted to regions? \Sexpr{temp.region_label} \begin{itemize}
		\item Analysis region BED: \texttt{\url{\Sexpr{param$region.subset.path}}} (MD5 \texttt{\Sexpr{texquote(temp.region_md5)}})
	\end{itemize}
	\item Sequence masks: \texttt{\url{\Sexpr{param$path.mask.regions.prefix}}} \begin{itemize}
		\item Low complexity: \texttt{\Sexpr{gsub(".*/", "", param$path.mdust)}} (MD5 \texttt{\Sexpr{texquote(fileMD5(param$path.mdust))}})
		\item Repetitive: \texttt{\Sexpr{gsub(".*/", "", param$path.rmsk)}} (MD5 \texttt{\Sexpr{texquote(fileMD5(param$path.rmsk))}})
	\end{itemize}
\end{itemize}

\end{document}
